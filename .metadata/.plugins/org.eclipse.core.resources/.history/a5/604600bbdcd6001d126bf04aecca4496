package ltd.newbee.mall.controller.mall;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import ltd.newbee.mall.entity.BookingDetail;
import ltd.newbee.mall.entity.PayDetail;
import ltd.newbee.mall.service.BookingService;

@RestController
@RequestMapping("/booking")
public class BookingController {

    @Autowired
    private BookingService bookingService;

//    获取酒店信息
    @GetMapping("hotelInfo")
    public Map<String, Object> hotelInfo (@RequestParam("hotelId") int hotelId, @RequestParam("checkInDate") String checkInDate, @RequestParam("checkOutDate") String checkOutDate) {
        LocalDate checkIn = LocalDate.parse(checkInDate);
        LocalDate checkOut = LocalDate.parse(checkOutDate);
        long numNights = ChronoUnit.DAYS.between(checkIn, checkOut);

        List<Map<String, Object>> hotelInfoList = bookingService.hotelInfo(hotelId,checkInDate,checkOutDate);
        Map<String, Object> hotelInfo = hotelInfoList.get(0);
        double perNightPrice = (double) hotelInfo.get("per_night_price");
        double totalPrice = perNightPrice * numNights;

        Map<String, Object> result = new HashMap<>();
        result.put("hotelInfo", hotelInfo);
        result.put("numNights", numNights);
        result.put("totalPrice", totalPrice);

        return result;
    }
//   接收用户输入的预定信息
    @PostMapping("/booking")
    public ResponseEntity<String> booking(@RequestBody BookingDetail bookingDetail) {
        try {
            bookingService.booking(bookingDetail);
            return ResponseEntity.ok("Booking successful");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error occurred during booking: " + e.getMessage());
        }
    }


//   支付信息
        @PostMapping("/payment")
        public ResponseEntity<String> makePayment(@RequestBody PayDetail payDetail) {
            
            if (!isValidCreditCardNumber(payDetail.getCardNum())) {
                return ResponseEntity.badRequest().body("Invalid credit card number");
            }

            // Process payment
            bookingService.payment(payDetail);
            return ResponseEntity.ok("Payment successful");
        }
//利用luhn算法判断信用卡号是否有效
        private boolean isValidCreditCardNumber(String creditCardNumber) {
            int sum = 0;
            boolean alternate = false;
            for (int i = creditCardNumber.length() - 1; i >= 0; i--) {
                int n = Integer.parseInt(creditCardNumber.substring(i, i + 1));
                if (alternate) {
                    n *= 2;
                    if (n > 9) {
                        n = (n % 10) + 1;
                    }
                }
                sum += n;
                alternate = !alternate;
            }
            return (sum % 10 == 0);
        }
    }



